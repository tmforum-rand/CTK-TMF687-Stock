{"info":{"_postman_id":"cb3c594e-8102-44f3-8cdf-adffc9f56073","name":"CTK-Stock-4.1.0","schema":"https://schema.getpostman.com/json/collection/v2.1.0/collection.json"},"item":[{"name":"N1","item":[{"name":"/ProductStock","event":[{"listen":"test","script":{"exec":["var jsonData = pm.response.json();","","if (Array.isArray(jsonData)) { ","  ","    pm.test('Array not expected as response', function (){pm.expect.fail()});","  ","","}","","pm.test(\"Status code is 201\", function () {","  pm.response.to.have.status(201);","});","","var instance = pm.response.json();","var requiredAttributes = ['href', 'id', 'productStockLevel', 'productStockStatusType', 'stockedProduct'];","","pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","","","","pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","","pm.globals.set('HREFPS01', instance['href']);","pm.globals.set('IDPS01', instance['id']);","","pm.test('Body includes value held on href', function () {","  pm.expect(pm.response.text()).to.include(instance['href']);","});","pm.test('Body includes value held on id', function () {","  pm.expect(pm.response.text()).to.include(instance['id']);","});",""],"type":"text/javascript"}}],"request":{"method":"POST","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"body":{"mode":"raw","raw":"{\n  \"productStockLevel\": {\n    \"amount\": 24\n  },\n  \"productStockStatusType\": \"available\",\n  \"stockedProduct\": {}\n}"},"url":{"raw":"{{Stock}}productStock","host":["{{Stock}}productStock"]},"description":"This operation creates a ProductStock"},"response":[]},{"name":"/ProductStock","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","  ","  ","  ","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['href', 'id', 'productStockLevel', 'productStockStatusType', 'stockedProduct'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDPS01\")) {","            pm.test('href is ' + pm.globals.get(\"HREFPS01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPS01');});","            pm.test('id is ' + pm.globals.get(\"IDPS01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPS01');});","        }","        if (instance.id == pm.globals.get(\"IDPS02\")) {","            pm.test('href is ' + pm.globals.get(\"HREFPS02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPS02');});","            pm.test('id is ' + pm.globals.get(\"IDPS02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPS02');});","        }  ","    });","  }","  else {","    var instance = pm.response.json();","    var requiredAttributes = ['href', 'id', 'productStockLevel', 'productStockStatusType', 'stockedProduct'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDPS01\")) {","            pm.test('href is ' + pm.globals.get(\"HREFPS01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPS01');});","            pm.test('id is ' + pm.globals.get(\"IDPS01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPS01');});","        }","        if (instance.id == pm.globals.get(\"IDPS02\")) {","            pm.test('href is ' + pm.globals.get(\"HREFPS02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPS02');});","            pm.test('id is ' + pm.globals.get(\"IDPS02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPS02');});","        }","   ","  }","  ","  "],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Stock}}productStock","host":["{{Stock}}productStock"]},"description":"This operation search for the created ProductStock"},"response":[]},{"name":"/ProductStock/{{IDPS01}}","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","  ","  ","  ","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['href', 'id', 'productStockLevel', 'productStockStatusType', 'stockedProduct'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDPS01\")) {","            pm.test('href is ' + pm.globals.get(\"HREFPS01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPS01');});","            pm.test('id is ' + pm.globals.get(\"IDPS01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPS01');});","        }","        if (instance.id == pm.globals.get(\"IDPS02\")) {","            pm.test('IDPS02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","          ","    });","  }","  else {","    var instance = pm.response.json();","    var requiredAttributes = ['href', 'id', 'productStockLevel', 'productStockStatusType', 'stockedProduct'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDPS01\")) {","            pm.test('href is ' + pm.globals.get(\"HREFPS01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPS01');});","            pm.test('id is ' + pm.globals.get(\"IDPS01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPS01');});","        }","        if (instance.id == pm.globals.get(\"IDPS02\")) {","            pm.test('IDPS02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","","        ","   ","}","  ","  "],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Stock}}productStock/{{IDPS01}}","host":["{{Stock}}productStock"],"path":["{{IDPS01}}"]},"description":"This operation search for one of the created ProductStock"},"response":[]},{"name":"/ProductStock/{{IDPS01}}","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    pm.expect.fail(\"Array not expected as a Patch Reponse\")","}","","",""],"type":"text/javascript"}}],"request":{"method":"PATCH","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"body":{"mode":"raw","raw":"{\n  \"productStockLevel\": {\n    \"amount\": 25\n  },\n  \"productStockStatusType\": \"available\",\n  \"stockedProduct\": {}\n}","options":{"raw":{"language":"json"}}},"url":{"raw":"{{Stock}}productStock/{{IDPS01}}","host":["{{Stock}}productStock"],"path":["{{IDPS01}}"]}},"response":[]}]},{"name":"N2","item":[{"name":"/ProductStock?fields=id","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['id','href', 'id'];","      ","        pm.test('Instance must have id, href and filtered attribute', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes)});","        pm.test('Instance has only id, href and filtered attribute', function () { pm.expect(requiredAttributes).to.include.members(Object.keys(instance))});","    });","","    ","}","else { ","  ","    pm.test('Array expected as response', function (){pm.expect.fail()});","  ","","}"],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Stock}}productStock?fields=id","host":["{{Stock}}productStock"],"query":[{"key":"fields","value":"id"}]},"description":"This operation filter a ProductStock"},"response":[]},{"name":"/ProductStock?id={{IDPS01}}","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","  ","  ","  ","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['href', 'id', 'productStockLevel', 'productStockStatusType', 'stockedProduct'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDPS01\")) {","            pm.test('href is ' + pm.globals.get(\"HREFPS01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPS01');});","            pm.test('id is ' + pm.globals.get(\"IDPS01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPS01');});","        }","        if (instance.id == pm.globals.get(\"IDPS02\")) {","            pm.test('IDPS02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","          ","    });","  }","  else {","    var instance = pm.response.json();","    var requiredAttributes = ['href', 'id', 'productStockLevel', 'productStockStatusType', 'stockedProduct'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDPS01\")) {","            pm.test('href is ' + pm.globals.get(\"HREFPS01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPS01');});","            pm.test('id is ' + pm.globals.get(\"IDPS01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPS01');});","        }","        if (instance.id == pm.globals.get(\"IDPS02\")) {","            pm.test('IDPS02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","","        ","   ","}","  ","  "],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Stock}}productStock?id={{IDPS01}}","host":["{{Stock}}productStock"],"query":[{"key":"id","value":"{{IDPS01}}"}]},"description":"This operation filter a ProductStock"},"response":[]}]},{"name":"E1","item":[{"name":"/ProductStock/404ID","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 404\", function () {","    pm.response.to.have.status(404);","});","",""],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Stock}}ProductStock/eab6cf8f-64aa-43be-8203-d04706a7b20d","host":["{{Stock}}ProductStock"],"path":["eab6cf8f-64aa-43be-8203-d04706a7b20d"]},"description":"This operation search for one of the created ProductStock"},"response":[]}]},{"name":"N1","item":[{"name":"/ReserveProductStock","event":[{"listen":"test","script":{"exec":["var jsonData = pm.response.json();","","if (Array.isArray(jsonData)) { ","  ","    pm.test('Array not expected as response', function (){pm.expect.fail()});","  ","","}","","pm.test(\"Status code is 201\", function () {","  pm.response.to.have.status(201);","});","","var instance = pm.response.json();","var requiredAttributes = ['href', 'id', 'reserveProductStockItem', 'reserveProductStockState'];","","pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","","","","pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","pm.test('Response has reserveProductStockItem attribute', function() { pm.expect(instance[\"reserveProductStockItem\"]).to.be.a('array'); });","","pm.globals.set('HREFRPS01', instance['href']);","pm.globals.set('IDRPS01', instance['id']);","","pm.test('Body includes value held on href', function () {","  pm.expect(pm.response.text()).to.include(instance['href']);","});","pm.test('Body includes value held on id', function () {","  pm.expect(pm.response.text()).to.include(instance['id']);","});",""],"type":"text/javascript"}}],"request":{"method":"POST","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"body":{"mode":"raw","raw":"{\n  \"reserveProductStockItem\": [\n    {\n      \"id\": \"1\",\n      \"quantityRequested\": {\n        \"amount\": 1\n      }\n    }\n  ]\n}"},"url":{"raw":"{{Stock}}reserveProductStock","host":["{{Stock}}reserveProductStock"]},"description":"This operation creates a ReserveProductStock"},"response":[]},{"name":"/ReserveProductStock","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","  ","  ","  ","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['href', 'id', 'reserveProductStockItem', 'reserveProductStockState'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has reserveProductStockItem attribute', function() { pm.expect(instance[\"reserveProductStockItem\"]).to.be.a('array'); });","      ","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDRPS01\")) {","            pm.test('href is ' + pm.globals.get(\"HREFRPS01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFRPS01');});","            pm.test('id is ' + pm.globals.get(\"IDRPS01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDRPS01');});","        }","        if (instance.id == pm.globals.get(\"IDRPS02\")) {","            pm.test('href is ' + pm.globals.get(\"HREFRPS02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFRPS02');});","            pm.test('id is ' + pm.globals.get(\"IDRPS02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDRPS02');});","        }  ","    });","  }","  else {","    var instance = pm.response.json();","    var requiredAttributes = ['href', 'id', 'reserveProductStockItem', 'reserveProductStockState'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has reserveProductStockItem attribute', function() { pm.expect(instance[\"reserveProductStockItem\"]).to.be.a('array'); });","      ","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDRPS01\")) {","            pm.test('href is ' + pm.globals.get(\"HREFRPS01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFRPS01');});","            pm.test('id is ' + pm.globals.get(\"IDRPS01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDRPS01');});","        }","        if (instance.id == pm.globals.get(\"IDRPS02\")) {","            pm.test('href is ' + pm.globals.get(\"HREFRPS02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFRPS02');});","            pm.test('id is ' + pm.globals.get(\"IDRPS02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDRPS02');});","        }","   ","  }","  ","  "],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Stock}}reserveProductStock","host":["{{Stock}}reserveProductStock"]},"description":"This operation search for the created ReserveProductStock"},"response":[]},{"name":"/ReserveProductStock/{{IDRPS01}}","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","  ","  ","  ","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['href', 'id', 'reserveProductStockItem', 'reserveProductStockState'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has reserveProductStockItem attribute', function() { pm.expect(instance[\"reserveProductStockItem\"]).to.be.a('array'); });","      ","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDRPS01\")) {","            pm.test('href is ' + pm.globals.get(\"HREFRPS01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFRPS01');});","            pm.test('id is ' + pm.globals.get(\"IDRPS01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDRPS01');});","        }","        if (instance.id == pm.globals.get(\"IDRPS02\")) {","            pm.test('IDRPS02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","          ","    });","  }","  else {","    var instance = pm.response.json();","    var requiredAttributes = ['href', 'id', 'reserveProductStockItem', 'reserveProductStockState'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has reserveProductStockItem attribute', function() { pm.expect(instance[\"reserveProductStockItem\"]).to.be.a('array'); });","      ","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDRPS01\")) {","            pm.test('href is ' + pm.globals.get(\"HREFRPS01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFRPS01');});","            pm.test('id is ' + pm.globals.get(\"IDRPS01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDRPS01');});","        }","        if (instance.id == pm.globals.get(\"IDRPS02\")) {","            pm.test('IDRPS02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","","        ","   ","}","  ","  "],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Stock}}reserveProductStock/{{IDRPS01}}","host":["{{Stock}}reserveProductStock"],"path":["{{IDRPS01}}"]},"description":"This operation search for one of the created ReserveProductStock"},"response":[]}]},{"name":"N2","item":[{"name":"/ReserveProductStock?fields=id","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['id','href', 'id'];","      ","        pm.test('Instance must have id, href and filtered attribute', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes)});","        pm.test('Instance has only id, href and filtered attribute', function () { pm.expect(requiredAttributes).to.include.members(Object.keys(instance))});","    });","","    ","}","else { ","  ","    pm.test('Array expected as response', function (){pm.expect.fail()});","  ","","}"],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Stock}}reserveProductStock?fields=id","host":["{{Stock}}reserveProductStock"],"query":[{"key":"fields","value":"id"}]},"description":"This operation filter a ReserveProductStock"},"response":[]},{"name":"/ReserveProductStock?id={{IDRPS01}}","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","  ","  ","  ","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['href', 'id', 'reserveProductStockItem', 'reserveProductStockState'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has reserveProductStockItem attribute', function() { pm.expect(instance[\"reserveProductStockItem\"]).to.be.a('array'); });","      ","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDRPS01\")) {","            pm.test('href is ' + pm.globals.get(\"HREFRPS01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFRPS01');});","            pm.test('id is ' + pm.globals.get(\"IDRPS01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDRPS01');});","        }","        if (instance.id == pm.globals.get(\"IDRPS02\")) {","            pm.test('IDRPS02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","          ","    });","  }","  else {","    var instance = pm.response.json();","    var requiredAttributes = ['href', 'id', 'reserveProductStockItem', 'reserveProductStockState'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has reserveProductStockItem attribute', function() { pm.expect(instance[\"reserveProductStockItem\"]).to.be.a('array'); });","      ","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDRPS01\")) {","            pm.test('href is ' + pm.globals.get(\"HREFRPS01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFRPS01');});","            pm.test('id is ' + pm.globals.get(\"IDRPS01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDRPS01');});","        }","        if (instance.id == pm.globals.get(\"IDRPS02\")) {","            pm.test('IDRPS02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","","        ","   ","}","  ","  "],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Stock}}reserveProductStock?id={{IDRPS01}}","host":["{{Stock}}reserveProductStock"],"query":[{"key":"id","value":"{{IDRPS01}}"}]},"description":"This operation filter a ReserveProductStock"},"response":[]}]},{"name":"E1","item":[{"name":"/ReserveProductStock/404ID","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 404\", function () {","    pm.response.to.have.status(404);","});","",""],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Stock}}ReserveProductStock/e00aad64-047c-48ab-b7ef-39171eda6450","host":["{{Stock}}ReserveProductStock"],"path":["e00aad64-047c-48ab-b7ef-39171eda6450"]},"description":"This operation search for one of the created ReserveProductStock"},"response":[]}]}]}